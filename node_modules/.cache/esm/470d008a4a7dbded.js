let chalk,execa,fs,Listr,ncp,path,install,promisify,PROJECT_TYPES,RN_DEV_PKG,RN_PKG,RN_VERSION;_4a7‍.x([["createProject",()=>createProject]]);_4a7‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_4a7‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_4a7‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_4a7‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_4a7‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_4a7‍.w("path",[["default",["path"],function(v){path=v}]]);_4a7‍.w("pkg-install",[["install",["install"],function(v){install=v}]]);_4a7‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_4a7‍.w("./constants",[["PROJECT_TYPES",["PROJECT_TYPES"],function(v){PROJECT_TYPES=v}],["RN_DEV_PKG",["RN_DEV_PKG"],function(v){RN_DEV_PKG=v}],["RN_PKG",["RN_PKG"],function(v){RN_PKG=v}],["RN_VERSION",["RN_VERSION"],function(v){RN_VERSION=v}]]);









const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
  return copy(options.templateDirectory, options.projectDirectory, {
    clobber: true,
  });
}

async function initReactNativeProject(options) {
  const result = await execa.command(
    `npx react-native init ${options.name} --version ${RN_VERSION} --template react-native-template-typescript`,
    {
      cwd: options.targetDirectory,
    }
  );
  if (result.failed) {
    return Promise.reject(new Error("Failed to init react native project"));
  }
  return;
}

async function installPods(options) {
  const result = await execa.command(`npx pod-install`, {
    cwd: options.projectDirectory,
  });
  if (result.failed) {
    return Promise.reject(new Error("Failed to install Pods"));
  }
  return;
}

async function getReactNativeTasks(options) {
  return new Listr([
    {
      title: "Init project files",
      task: () => initReactNativeProject(options),
    },
    {
      title: "Copy template files",
      task: () => copyTemplateFiles(options),
    },
    {
      title: "Install dependencies",
      task: () =>
        install(RN_PKG, {
          prefer: "yarn",
          dev: false,
          cwd: options.projectDirectory,
        }),
    },
    {
      title: "Install dev dependencies",
      task: () =>
        install(RN_DEV_PKG, {
          prefer: "yarn",
          dev: true,
          cwd: options.projectDirectory,
        }),
    },
    {
      title: "Install pod",
      task: () => installPods(options),
    },
  ]);
}

       async function createProject(options) {
  options = {
    ...options,
    targetDirectory: `${options.targetDirectory || process.cwd()}`,
    projectDirectory: `${options.targetDirectory || process.cwd()}/${
      options.name
    }`,
  };

  const currentFileUrl = _4a7‍._.meta.url;
  const templateDir = path.resolve(
    new URL(currentFileUrl).pathname,
    "../../templates",
    options.template.toLowerCase()
  );
  options.templateDirectory = templateDir;

  try {
    await access(templateDir, fs.constants.R_OK);
  } catch (err) {
    _4a7‍.g.console.error("%s Invalid template name", chalk.red.bold("ERROR"));
    process.exit(1);
  }
  let task;
  if (options.template === PROJECT_TYPES[0].template) {
    task = await getReactNativeTasks(options);
  }
  await task.run();
  _4a7‍.g.console.log("%s Project ready", chalk.green.bold("DONE"));
  return true;
}
